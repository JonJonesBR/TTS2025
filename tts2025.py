# -*- coding: utf-8 -*-
"""TTS2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWmVdnH62h5brugYVm2N_JGGN1sjqXon
"""

# -*- coding: utf-8 -*-
"""TTS2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yWmVdnH62h5brugYVm2N_JGGN1sjqXon
"""

# @title üöÄ **CLIQUE AQUI PARA INICIAR O GERADOR DE AUDIOBOOK** üöÄ
# Esta c√©lula instala tudo, cria os arquivos e inicia o servidor.
# Siga as instru√ß√µes que aparecer√£o no final da execu√ß√£o.

import os
import io
import asyncio
import sys
import nest_asyncio
from pyngrok import ngrok

# Aplica nest_asyncio no in√≠cio para garantir compatibilidade
nest_asyncio.apply()

# --- Instalar bibliotecas ---
print("Instalando bibliotecas necess√°rias... Por favor, aguarde.")
!pip install fastapi uvicorn[standard] PyPDF2 python-docx EbookLib edge-tts python-multipart pyngrok -qq
print("Instala√ß√£o conclu√≠da.")

# --- Criar pastas ---
print("Criando diret√≥rios necess√°rios...")
os.makedirs("uploads", exist_ok=True)
os.makedirs("audiobooks", exist_ok=True)
os.makedirs("static", exist_ok=True) # Para o frontend
print("Diret√≥rios criados.")

# --- Criar o arquivo main.py ---
print("Criando o arquivo main.py (backend)...")
# TODO: Certifique-se de que o conte√∫do de main.py aqui esteja atualizado com as √∫ltimas modifica√ß√µes para receber o token do ngrok
# Cole o conte√∫do COMPLETO do main.py modificado aqui.
# Dica: No VS Code, abra main.py, selecione todo o texto e cole-o entre as aspas triplas.
main_py_content = """
from fastapi import FastAPI, UploadFile, File, HTTPException, BackgroundTasks, Form # Adicionado 'Form'
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
import os
import io
import asyncio
import edge_tts
from PyPDF2 import PdfReader
from docx import Document
from ebooklib import epub
from bs4 import BeautifulSoup
import traceback
import json
import uuid

# Importa a biblioteca ngrok, mas N√ÉO vamos definir o token aqui inicialmente
from pyngrok import ngrok # Importa ngrok
import nest_asyncio # Para o uvicorn no Colab

# Aplica nest_asyncio para o uvicorn
nest_asyncio.apply()

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")

# Cache para armazenar as vozes ap√≥s a primeira busca
cached_voices = {}

# Dicion√°rio para armazenar o status das tarefas de convers√£o
conversion_tasks = {}

# Vari√°vel global para armazenar o token ngrok e o t√∫nel
NGROK_AUTH_TOKEN = None
PUBLIC_NGROK_URL = None


# Fun√ß√£o para extrair texto de diferentes tipos de arquivo
async def get_text_from_file(file_path: str, task_id: str):
    text = ""
    filename = os.path.basename(file_path)
    total_parts = 1

    try:
        if filename.endswith('.pdf'):
            reader = PdfReader(file_path)
            total_parts = len(reader.pages)
            for i, page in enumerate(reader.pages):
                extracted_page_text = page.extract_text()
                if extracted_page_text:
                    text += extracted_page_text + "\n"
                progress = int(((i + 1) / total_parts) * 50)
                conversion_tasks[task_id].update({"progress": progress, "message": f"Extraindo texto (P√°gina {i+1}/{total_parts})..."})
                await asyncio.sleep(0.01)
        elif filename.endswith('.txt'):
            with open(file_path, 'r', encoding='utf-8') as f:
                text = f.read()
            conversion_tasks[task_id].update({"progress": 50, "message": "Texto de arquivo TXT lido."})
        elif filename.endswith('.docx'):
            doc = Document(file_path)
            total_parts = len(doc.paragraphs)
            for i, paragraph in enumerate(doc.paragraphs):
                text += paragraph.text + "\n"
                progress = int(((i + 1) / total_parts) * 50)
                conversion_tasks[task_id].update({"progress": progress, "message": f"Extraindo texto (Par√°grafo {i+1}/{total_parts})..."})
                await asyncio.sleep(0.01)
        elif filename.endswith('.epub'):
            book = epub.read_epub(file_path)
            document_items = [item for item in book.get_items() if item.get_type() == epub.ITEM_DOCUMENT]
            total_parts = len(document_items)
            for i, item in enumerate(document_items):
                soup = BeautifulSoup(item.get_content(), 'html.parser')
                text += soup.get_text(separator='\n') + "\n"
                progress = int(((i + 1) / total_parts) * 50)
                conversion_tasks[task_id].update({"progress": progress, "message": f"Extraindo texto (Cap√≠tulo {i+1}/{total_parts})..."})
                await asyncio.sleep(0.01)

        conversion_tasks[task_id].update({"progress": 50, "message": "Extra√ß√£o de texto conclu√≠da."})
        print(f"Extra√ß√£o de texto para {filename} conclu√≠da. Total de caracteres: {len(text)}.")
        return text.strip()
    except Exception as e:
        print(f"Erro na extra√ß√£o de texto de {filename}: {e}")
        conversion_tasks[task_id].update({"status": "failed", "message": f"Erro na extra√ß√£o de texto: {str(e)}"})
        raise

# Fun√ß√£o para obter vozes dispon√≠veis do Edge TTS com cache
async def get_available_voices():
    global cached_voices
    if cached_voices:
        return cached_voices

    print("Buscando vozes Edge TTS dispon√≠veis...")
    try:
        voices = await edge_tts.list_voices()
        pt_br_voices = {}
        for voice in voices:
            if voice["Locale"] == "pt-BR":
                name = voice["ShortName"].replace("pt-BR-", "")
                name = name.replace("Neural", " (Neural)")
                if voice["Gender"] == "Female":
                    name = f"{name} (Feminina)"
                elif voice["Gender"] == "Male":
                    name = f"{name} (Masculina)"
                pt_br_voices[voice["ShortName"]] = name.strip()

        ordered_voices = {}
        if "pt-BR-ThalitaMultilingualNeural" in pt_br_voices:
            ordered_voices["pt-BR-ThalitaMultilingualNeural"] = pt_br_voices["pt-BR-ThalitaMultilingualNeural"]
        if "pt-BR-FranciscaNeural" in pt_br_voices:
            ordered_voices["pt-BR-FranciscaNeural"] = pt_br_voices["pt-BR-FranciscaNeural"]
        if "pt-BR-AntonioNeural" in pt_br_voices:
            ordered_voices["pt-BR-AntonioNeural"] = pt_br_voices["pt-BR-AntonioNeural"]

        for code, name in pt_br_voices.items():
            if code not in ordered_voices:
                ordered_voices[code] = name

        cached_voices = ordered_voices
        print(f"Vozes carregadas: {len(cached_voices)} op√ß√µes.")
        return cached_voices
    except Exception as e:
        print(f"Erro ao obter vozes Edge TTS: {e}")
        print(traceback.format_exc())
        return {
            "pt-BR-ThalitaMultilingualNeural": "Thalita (Feminina, Neural) - Fallback",
            "pt-BR-FranciscaNeural": "Francisca (Feminina, Neural) - Fallback",
            "pt-BR-AntonioNeural": "Antonio (Masculina, Neural) - Fallback"
        }

# Fun√ß√£o de tarefa de background para realizar a convers√£o
async def perform_conversion_task(task_id: str, file_path: str, voice: str):
    try:
        conversion_tasks[task_id].update({"status": "extracting", "message": "Iniciando extra√ß√£o de texto...", "progress": 0})
        text = await get_text_from_file(file_path, task_id)

        if not text:
            conversion_tasks[task_id].update({"status": "failed", "message": "N√£o foi poss√≠vel extrair texto do arquivo."})
            return

        audio_filename = os.path.splitext(os.path.basename(file_path))[0] + ".mp3"
        audio_filepath = os.path.join("audiobooks", audio_filename)
        conversion_tasks[task_id]["file_path"] = audio_filepath
        conversion_tasks[task_id]["total_characters"] = len(text)

        print(f"Iniciando gera√ß√£o de √°udio com Edge TTS (Voz: {voice}) para {len(text)} caracteres...")
        conversion_tasks[task_id].update({"status": "converting", "message": "Convertendo texto em √°udio...", "progress": 50})

        communicate = edge_tts.Communicate(text, voice)
        audio_data_bytes = b""
        chunk_counter = 0

        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                audio_data_bytes += chunk["data"]
                chunk_counter += 1
                progress_tts = int(50 + (chunk_counter / 500) * 50)
                progress_tts = min(progress_tts, 99)
                conversion_tasks[task_id].update({"progress": progress_tts, "message": f"Gerando √°udio ({progress_tts-50}% conclu√≠do)..."})
                await asyncio.sleep(0.001)
            elif chunk["type"] == "end":
                print(f"Fim do stream TTS para tarefa {task_id}.")

        with open(audio_filepath, "wb") as out:
            out.write(audio_data_bytes)
        print(f"√Åudio para tarefa {task_id} gerado e salvo em {audio_filepath}.")

        conversion_tasks[task_id].update({"status": "completed", "message": "Audiobook pronto para download!", "progress": 100})
    except Exception as e:
        print(f"Erro na convers√£o da tarefa {task_id}: {e}")
        print(traceback.format_exc())
        conversion_tasks[task_id].update({"status": "failed", "message": f"Erro na convers√£o: {str(e)}"})
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"Arquivo de texto tempor√°rio {os.path.basename(file_path)} removido.")

# Rota principal que serve o arquivo HTML do frontend
@app.get("/", response_class=HTMLResponse)
async def read_root():
    with open("static/index.html", "r", encoding="utf-8") as f:
        return f.read()

# NOVA ROTA: Para receber e configurar o token do ngrok
@app.post("/set_ngrok_token")
async def set_ngrok_token(token: str = Form(...)): # Usa Form para receber dados de formul√°rio
    global NGROK_AUTH_TOKEN, PUBLIC_NGROK_URL
    if not token:
        raise HTTPException(status_code=400, detail="Token do ngrok n√£o pode ser vazio.")

    NGROK_AUTH_TOKEN = token
    ngrok.kill() # Mata qualquer processo ngrok anterior

    try:
        # Tenta conectar com o novo token
        # Assumindo que o uvicorn rodar√° na porta 8000
        PUBLIC_NGROK_URL = ngrok.connect(8000).public_url
        print(f"Ngrok configurado com sucesso! T√∫nel em: {PUBLIC_NGROK_URL}")
        return JSONResponse({"message": "Token ngrok configurado e t√∫nel estabelecido!", "public_url": PUBLIC_NGROK_URL})
    except Exception as e:
        print(f"Erro ao configurar ngrok com o token fornecido: {e}")
        NGROK_AUTH_TOKEN = None # Reseta o token se houver falha
        raise HTTPException(status_code=500, detail=f"Erro ao configurar ngrok: {str(e)}. Verifique se o token √© v√°lido.")


# Rota para obter as vozes dispon√≠veis para o frontend
@app.get("/voices", response_class=JSONResponse)
async def list_voices_endpoint():
    voices = await get_available_voices()
    return voices

# Novo endpoint para iniciar o processamento em background
@app.post("/process_file")
async def process_file_endpoint(file: UploadFile = File(...), voice: str = "pt-BR-ThalitaMultilingualNeural", background_tasks: BackgroundTasks = BackgroundTasks()):
    global NGROK_AUTH_TOKEN
    if not NGROK_AUTH_TOKEN:
        raise HTTPException(status_code=401, detail="Token do ngrok n√£o configurado. Por favor, insira seu token primeiro.")

    current_available_voices = await get_available_voices()
    if voice not in current_available_voices:
        raise HTTPException(status_code=400, detail=f"Voz '{voice}' n√£o √© v√°lida. Escolha uma das op√ß√µes dispon√≠veis.")
    if not file.filename:
        raise HTTPException(status_code=400, detail="Nenhum arquivo enviado.")

    task_id = str(uuid.uuid4())
    temp_input_filepath = os.path.join("uploads", f"{task_id}_{file.filename}")

    try:
        content = await file.read()
        with open(temp_input_filepath, "wb") as f:
            f.write(content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao salvar arquivo tempor√°rio: {str(e)}")

    conversion_tasks[task_id] = {
        "status": "pending",
        "progress": 0,
        "message": "Tarefa iniciada, aguardando processamento...",
        "file_path": None,
        "total_characters": 0
    }

    background_tasks.add_task(perform_conversion_task, task_id, temp_input_filepath, voice)

    return JSONResponse({"task_id": task_id, "message": "Processamento iniciado. Use o endpoint /status para verificar o progresso."})

# Novo endpoint para verificar o status da convers√£o
@app.get("/status/{task_id}")
async def get_conversion_status(task_id: str):
    status = conversion_tasks.get(task_id)
    if not status:
        raise HTTPException(status_code=404, detail="ID da tarefa n√£o encontrado ou tarefa j√° conclu√≠da e limpa.")
    return JSONResponse(status)

# Novo endpoint para download do arquivo final
@app.get("/download/{task_id}")
async def download_audiobook(task_id: str, background_tasks: BackgroundTasks):
    status = conversion_tasks.get(task_id)
    if not status or status["status"] != "completed" or not status["file_path"] or not os.path.exists(status["file_path"]):
        print(f"Tentativa de download para tarefa {task_id} falhou. Status: {status}")
        raise HTTPException(status_code=404, detail="Audiobook n√£o encontrado ou ainda n√£o pronto para download.")

    audio_filepath = status["file_path"]
    filename = os.path.basename(audio_filepath)

    response = FileResponse(audio_filepath, media_type="audio/mpeg", filename=filename, background=background_tasks)

    background_tasks.add_task(cleanup_file_after_download, audio_filepath, task_id)

    return response

# Fun√ß√£o de limpeza para ser usada como background_task
async def cleanup_file_after_download(file_path: str, task_id: str):
    print(f"Iniciando limpeza do arquivo tempor√°rio: {file_path}")
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"Arquivo tempor√°rio {file_path} removido com sucesso.")
    else:
        print(f"Arquivo tempor√°rio {file_path} n√£o encontrado para remo√ß√£o (j√° removido?).")

    if task_id in conversion_tasks:
        del conversion_tasks[task_id]
        print(f"Status da tarefa {task_id} removido.")
"""
with open("main.py", "w", encoding="utf-8") as f:
    f.write(main_py_content)
print("main.py criado.")

# --- Criar o arquivo frontend (index.html) ---
print("Criando o arquivo frontend (static/index.html)...")
# TODO: Certifique-se de que o conte√∫do de index.html aqui esteja atualizado com as √∫ltimas modifica√ß√µes para o campo do ngrok token
# Cole o conte√∫do COMPLETO do index.html modificado aqui.
# Dica: No VS Code, abra index.html, selecione todo o texto e cole-o entre as aspas triplas.
index_html_content = """
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerador de Audiobook Gratuito</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f7f6;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            box-sizing: border-box;
        }
        .container {
            background-color: #ffffff;
            max-width: 600px;
            margin: auto;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
            border: 1px solid #e0e0e0;
        }
        h1 {
            color: #2c3e50;
            font-size: 1.8em;
            margin-bottom: 15px;
        }
        p {
            font-size: 1.1em;
            color: #555;
            margin-bottom: 25px;
            line-height: 1.6;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #444;
        }
        select, input[type="file"], input[type="text"] { /* Adicionado input[type="text"] */
            width: calc(100% - 20px);
            padding: 10px;
            margin: 0 auto 20px auto;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 1em;
            background-color: #e9ecef;
            cursor: pointer;
            box-sizing: border-box;
        }
        button {
            padding: 12px 25px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 2px 5px rgba(0, 123, 255, 0.2);
            margin-top: 10px;
        }
        button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
            box-shadow: none;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        .message, .error {
            margin-top: 25px;
            padding: 12px;
            border-radius: 8px;
            font-weight: bold;
            display: none;
            word-wrap: break-word;
        }
        .message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .progress-container {
            width: 100%;
            background-color: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 20px;
            height: 25px;
            display: none;
            position: relative;
        }
        .progress-bar {
            height: 100%;
            background-color: #007bff;
            width: 0;
            border-radius: 5px;
            transition: width 0.5s ease-in-out;
            position: absolute;
            left: 0;
            top: 0;
        }
        .progress-text {
            position: absolute;
            width: 100%;
            text-align: center;
            line-height: 25px;
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            z-index: 1;
        }
        .ngrok-setup { /* Estilo para a se√ß√£o de configura√ß√£o do ngrok */
            background-color: #e6f7ff;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border: 1px solid #91d5ff;
        }
        .ngrok-setup h2 {
            color: #0056b3;
            margin-top: 0;
            font-size: 1.5em;
        }
        .ngrok-setup ol {
            text-align: left;
            margin-bottom: 20px;
            line-height: 1.8;
            font-size: 0.95em;
            color: #444;
        }
        .ngrok-setup ol li strong {
            color: #003a7a;
        }
        .form-section {
            display: none; /* Esconde a se√ß√£o principal inicialmente */
        }
        .ngrok-url-display {
            margin-top: 15px;
            padding: 10px;
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            border-radius: 6px;
            font-weight: bold;
            display: none;
            word-wrap: break-word;
            text-align: left;
        }
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 20px;
            }
            h1 {
                font-size: 1.5em;
            }
            p {
                font-size: 0.95em;
            }
            button {
                padding: 10px 20px;
                font-size: 1em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Crie seu Audiobook Gratuitamente</h1>
        <p>Fa√ßa o upload de um arquivo PDF, TXT, EPUB, DOC/DOCX e converta-o em audiobook em segundos.</p>

        <div class="ngrok-setup" id="ngrokSetupSection">
            <h2>Passo 1: Configurar ngrok</h2>
            <p>Para que este aplicativo funcione, ele precisa criar um t√∫nel seguro para a internet usando o ngrok. Voc√™ precisa de um token de autentica√ß√£o do ngrok.</p>
            <ol>
                <li>V√° para o site oficial do ngrok: <strong><a href="https://ngrok.com/signup" target="_blank">ngrok.com/signup</a></strong></li>
                <li>Crie uma conta gratuita (ou fa√ßa login se j√° tiver uma).</li>
                <li>Ap√≥s fazer login, acesse seu painel e encontre seu `Auth Token` em <strong><a href="https://dashboard.ngrok.com/get-started/your-authtoken" target="_blank">dashboard.ngrok.com/get-started/your-authtoken</a></strong></li>
                <li>Copie o token. Ele se parecer√° com algo como `2xbaQNvi6miSZUVf8MzgZAQfTh6_t2wYSecnyeuys1qhr5vc`.</li>
                <li>Cole o token no campo abaixo e clique em "Configurar ngrok".</li>
            </ol>
            <label for="ngrokTokenInput">Seu Token de Autentica√ß√£o ngrok:</label>
            <input type="text" id="ngrokTokenInput" placeholder="Cole seu token ngrok aqui">
            <button id="setNgrokTokenButton">Configurar ngrok</button>
            <div id="ngrokUrlDisplay" class="ngrok-url-display"></div>
            <div id="ngrokMessage" class="message"></div>
            <div id="ngrokError" class="error"></div>
        </div>

        <form id="uploadForm" enctype="multipart/form-data" class="form-section">
            <h2>Passo 2: Gerar seu Audiobook</h2>
            <label for="voiceSelect">Escolha a Voz:</label>
            <select id="voiceSelect" name="voice">
                </select>
            <br><br>
            <input type="file" name="file" id="fileInput" accept=".pdf,.txt,.epub,.doc,.docx">
            <button type="submit" id="submitButton">Gerar Audiobook</button>
        </form>

        <div class="progress-container" id="progressContainer">
            <div class="progress-bar" id="progressBar"></div>
            <div class="progress-text" id="progressText">Aguardando...</div>
        </div>
        <div id="message" class="message"></div>
        <div id="error" class="error"></div>
    </div>

    <script>
        const ngrokSetupSection = document.getElementById('ngrokSetupSection');
        const ngrokTokenInput = document.getElementById('ngrokTokenInput');
        const setNgrokTokenButton = document.getElementById('setNgrokTokenButton');
        const ngrokMessageDiv = document.getElementById('ngrokMessage');
        const ngrokErrorDiv = document.getElementById('ngrokError');
        const ngrokUrlDisplay = document.getElementById('ngrokUrlDisplay');

        const uploadForm = document.getElementById('uploadForm');
        const fileInput = document.getElementById('fileInput');
        const voiceSelect = document.getElementById('voiceSelect');
        const messageDiv = document.getElementById('message');
        const errorDiv = document.getElementById('error');
        const submitButton = document.getElementById('submitButton');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');

        let pollingInterval;
        let startTime;

        // Fun√ß√£o para exibir mensagem de status e controlar a barra de progresso
        function showStatus(targetDiv, text, isError = false, progress = null, messageDetail = '') {
            targetDiv.style.display = 'block';
            if (isError) {
                targetDiv.classList.remove('message');
                targetDiv.classList.add('error');
            } else {
                targetDiv.classList.remove('error');
                targetDiv.classList.add('message');
            }
            targetDiv.textContent = text;

            // L√≥gica de progresso √© separada, pois afeta elementos espec√≠ficos
            if (targetDiv === messageDiv || targetDiv === errorDiv) { // Apenas para mensagens da convers√£o
                if (progress !== null && progress >= 0 && progress <= 100) {
                    progressContainer.style.display = 'block';
                    progressBar.style.width = `${progress}%`;
                    let timeElapsed = 0;
                    if (startTime) {
                        timeElapsed = (Date.now() - startTime) / 1000;
                    }
                    progressText.textContent = `${messageDetail} (${progress}%) - Tempo: ${timeElapsed.toFixed(1)}s`;
                } else {
                    progressContainer.style.display = 'none';
                    progressBar.style.width = '0%';
                    progressText.textContent = 'Aguardando...';
                }
            } else { // Para outras mensagens que n√£o s√£o de progresso
                progressContainer.style.display = 'none';
            }
        }

        // Fun√ß√£o para limpar todas as mensagens e estados
        function clearAllMessages() {
            messageDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            ngrokMessageDiv.style.display = 'none';
            ngrokErrorDiv.style.display = 'none';
            ngrokUrlDisplay.style.display = 'none';
            clearInterval(pollingInterval);
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
            progressText.textContent = 'Aguardando...';
        }

        // Fun√ß√£o para carregar as vozes dispon√≠veis
        async function loadVoices() {
            try {
                const response = await fetch('/voices');
                if (response.ok) {
                    const voices = await response.json();
                    voiceSelect.innerHTML = '';
                    for (const code in voices) {
                        const option = document.createElement('option');
                        option.value = code;
                        option.textContent = voices[code];
                        voiceSelect.appendChild(option);
                    }
                    if (voices["pt-BR-ThalitaMultilingualNeural"]) {
                        voiceSelect.value = "pt-BR-ThalitaMultilingualNeural";
                    }
                } else {
                    showStatus(errorDiv, 'Erro ao carregar vozes. Tente recarregar a p√°gina.', true);
                }
            } catch (error) {
                console.error('Erro ao carregar vozes:', error);
                showStatus(errorDiv, 'Erro de conex√£o ao carregar vozes. Verifique o servidor.', true);
            }
        }

        // ---- L√≥gica para o Token do ngrok ----
        setNgrokTokenButton.addEventListener('click', async function() {
            clearAllMessages(); // Limpa mensagens anteriores
            const ngrokToken = ngrokTokenInput.value.trim();

            if (!ngrokToken) {
                showStatus(ngrokErrorDiv, 'Por favor, insira seu token do ngrok.', true);
                return;
            }

            setNgrokTokenButton.disabled = true;
            ngrokTokenInput.disabled = true;
            showStatus(ngrokMessageDiv, 'Configurando ngrok...', false);

            try {
                const response = await fetch('/set_ngrok_token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `token=${encodeURIComponent(ngrokToken)}`
                });

                if (response.ok) {
                    const result = await response.json();
                    showStatus(ngrokMessageDiv, `ngrok configurado! URL p√∫blica: ${result.public_url}`, false);
                    ngrokUrlDisplay.innerHTML = `<strong>URL P√∫blica:</strong> <a href="${result.public_url}" target="_blank">${result.public_url}</a> (Copie e use esta URL para acessar o app)`;
                    ngrokUrlDisplay.style.display = 'block';

                    // Mostra a se√ß√£o de upload agora que o ngrok est√° configurado
                    uploadForm.style.display = 'block';
                    loadVoices(); // Carrega as vozes ap√≥s o ngrok estar ativo
                } else {
                    const errorData = await response.json();
                    showStatus(ngrokErrorDiv, `Erro ao configurar ngrok: ${errorData.detail || 'Erro desconhecido'}`, true);
                    setNgrokTokenButton.disabled = false;
                    ngrokTokenInput.disabled = false;
                }
            } catch (error) {
                console.error('Erro ao enviar token ngrok:', error);
                showStatus(ngrokErrorDiv, 'Erro de conex√£o ao configurar ngrok. Verifique se o servidor est√° rodando.', true);
                setNgrokTokenButton.disabled = false;
                ngrokTokenInput.disabled = false;
            }
        });

        // ---- L√≥gica para o Upload do Arquivo ----
        uploadForm.addEventListener('submit', async function(event) {
            event.preventDefault();

            clearAllMessages(); // Limpa todas as mensagens

            if (fileInput.files.length === 0) {
                showStatus(errorDiv, 'Por favor, selecione um arquivo.', true);
                return;
            }

            const selectedVoice = voiceSelect.value;
            if (!selectedVoice) {
                showStatus(errorDiv, 'Por favor, selecione uma voz.', true);
                return;
            }

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            formData.append('voice', selectedVoice);

            showStatus(messageDiv, 'Enviando arquivo e iniciando processamento...', false, 0, 'Iniciando...');
            submitButton.disabled = true;
            fileInput.disabled = true;
            voiceSelect.disabled = true;

            try {
                const processResponse = await fetch('/process_file', {
                    method: 'POST',
                    body: formData
                });

                if (!processResponse.ok) {
                    const errorData = await processResponse.json();
                    showStatus(errorDiv, `Erro ao iniciar processamento: ${errorData.detail || 'Erro desconhecido'}`, true);
                    submitButton.disabled = false;
                    fileInput.disabled = false;
                    voiceSelect.disabled = false;
                    return;
                }

                const processResult = await processResponse.json();
                const taskId = processResult.task_id;
                startTime = Date.now();

                showStatus(messageDiv, 'Processamento iniciado. Verificando progresso...', false, 0, 'Iniciando...');

                pollingInterval = setInterval(async () => {
                    try {
                        const statusResponse = await fetch(`/status/${taskId}`);
                        if (!statusResponse.ok) {
                            clearInterval(pollingInterval);
                            showStatus(errorDiv, 'Erro ao verificar status da convers√£o. Tente novamente.', true);
                            submitButton.disabled = false;
                            fileInput.disabled = false;
                            voiceSelect.disabled = false;
                            return;
                        }

                        const statusResult = await statusResponse.json();
                        const { status, progress, message } = statusResult;

                        showStatus(messageDiv, message, false, progress, message);

                        if (status === 'completed') {
                            clearInterval(pollingInterval);
                            showStatus(messageDiv, 'Audiobook pronto! Iniciando download...', false, 100, 'Download pronto!');

                            const downloadUrl = `/download/${taskId}`;
                            const a = document.createElement('a');
                            a.style.display = 'none';
                            a.href = downloadUrl;
                            a.download = fileInput.files[0].name.split('.').slice(0, -1).join('.') + '.mp3';
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);

                            showStatus(messageDiv, 'Download conclu√≠do!', false, 100, 'Conclu√≠do!');
                            submitButton.disabled = false;
                            fileInput.disabled = false;
                            voiceSelect.disabled = false;

                        } else if (status === 'failed') {
                            clearInterval(pollingInterval);
                            showStatus(errorDiv, `Convers√£o falhou: ${message}`, true);
                            submitButton.disabled = false;
                            fileInput.disabled = false;
                            voiceSelect.disabled = false;
                        }
                    } catch (error) {
                        clearInterval(pollingInterval);
                        console.error('Erro no polling de status:', error);
                        showStatus(errorDiv, 'Ocorreu um erro na comunica√ß√£o com o servidor durante o progresso. Tente novamente.', true);
                        submitButton.disabled = false;
                        fileInput.disabled = false;
                        voiceSelect.disabled = false;
                    }
                }, 2000);

            } catch (error) {
                console.error('Erro na requisi√ß√£o inicial:', error);
                showStatus(errorDiv, 'Ocorreu um erro na comunica√ß√£o com o servidor. Verifique sua conex√£o ou tente novamente.', true);
                submitButton.disabled = false;
                fileInput.disabled = false;
                voiceSelect.disabled = false;
            }
        });
    </script>
</body>
</html>
"""
os.makedirs("static", exist_ok=True) # Garante que a pasta static existe antes de escrever o arquivo
with open("static/index.html", "w", encoding="utf-8") as f:
    f.write(index_html_content)
print("static/index.html criado.")


# --- Iniciar Uvicorn e ngrok ---
# O ngrok.set_auth_token PRECISA vir ANTES do ngrok.connect()
print("\n")
print("----------------------------------------------------------------------")
print("üî• INICIANDO O SERVIDOR FASTAPI E T√öNEL NGROK üî•")
print("Por favor, aguarde alguns segundos para a URL aparecer...")
print("----------------------------------------------------------------------")

import uvicorn
# from pyngrok import ngrok # J√° importado no topo da c√©lula
# import time # J√° importado, mas bom para clareza

try:
    # Mata qualquer processo ngrok anterior para evitar erros de porta
    ngrok.kill()

    # Define um token de fallback/exemplo APENAS para iniciar o t√∫nel no Colab.
    # O usu√°rio AINDA precisar√° inserir o DELE na interface.
    # Esta linha √© a solu√ß√£o direta para o erro ERR_NGROK_4018.
    # Voc√™ pode colocar um token de teste v√°lido aqui se quiser, ou deixar como uma string vazia para que ele falhe,
    # mas pelo menos a UI carrega para o usu√°rio inserir o token.
    # MELHOR: Pe√ßa para o usu√°rio COPIAR E COLAR UM TOKEN AQUI PARA O COLAB TAMB√âM.
    # Exemplo: ngrok.set_auth_token("SEU_TOKEN_NGROK_AQUI_PARA_O_COLAB")
    # Para o prop√≥sito de rodar o Colab e obter a URL inicial, voc√™ PODE usar um token de teste.
    # Ou, se o usu√°rio N√ÉO preencher a vari√°vel de ambiente, ele vai falhar aqui.
    # Para simplicidade e para resolver o erro, vamos INSTRUIR o usu√°rio a inserir aqui.
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: PARA OBTER A URL P√öBLICA, VOC√ä PRECISA DE UM TOKEN DO NGROK AQUI! ‚ö†Ô∏è")
    print("Cole seu token ngrok abaixo (substitua a string vazia):")
    # O usu√°rio DEVE COPIAR E COLAR SEU TOKEN REAL AQUI antes de executar a c√©lula.
    NGROK_AUTH_TOKEN_COLAB_START = os.getenv("NGROK_AUTH_TOKEN", "COLE_SEU_TOKEN_AQUI_OU_COMENTE_ESTA_LINHA_PARA_FALHAR_NO_INICIO")
    # IMPORTANTE: A linha acima com "COLE_SEU_TOKEN_AQUI..." √© para o usu√°rio editar.
    # Para que o seu c√≥digo rode sem erro, voc√™ PRECISA de um token aqui.
    # Idealmente, o usu√°rio insere isso numa vari√°vel de ambiente do Colab antes de rodar.
    # Para o seu uso, voc√™ colocaria seu token real:
    # ngrok.set_auth_token("SUA_CHAVE_DE_AUTH_NGROK_AQUI")

    # Para demonstra√ß√£o e para o usu√°rio ver a UI, podemos usar um truque:
    # Se o ngrok.connect falhar sem auth token, ele ainda retorna um erro,
    # mas o uvicorn ainda pode iniciar. Para garantir que a UI carregue,
    # precisamos de um token V√ÅLIDO aqui.

    # SOLU√á√ÉO MAIS ROBUSTA: O usu√°rio define o token como uma vari√°vel de ambiente no Colab.
    # Instru√ß√£o para o usu√°rio no Colab:
    # V√° em "Runtime" -> "Change runtime type", selecione GPU/TPU (se for usar) e feche.
    # V√° em "Secrets" (na barra lateral esquerda, √≠cone de chave).
    # Adicione um novo segredo: Name: NGROK_AUTH_TOKEN, Value: SEU_TOKEN_REAL.
    # Certifique-se de ativar "Notebook access".

    # Tenta usar o segredo do Colab
    try:
        from google.colab import userdata
        user_ngrok_token = userdata.get('NGROK_AUTH_TOKEN')
        if user_ngrok_token:
            ngrok.set_auth_token(user_ngrok_token)
            print("Token ngrok carregado dos segredos do Colab.")
        else:
            print("\nAVISO: NGROK_AUTH_TOKEN N√ÉO ENCONTRADO NOS SEGREDOS DO COLAB.")
            print("Se voc√™ n√£o configurar, a URL ngrok inicial N√ÉO FUNCIONAR√Å e voc√™ ter√° que usar a URL interna do Colab (se dispon√≠vel) ou depurar.")
            print("Por favor, siga as instru√ß√µes em https://dashboard.ngrok.com/get-started/your-authtoken para obter e configurar seu token nos segredos do Colab.")
            # Se n√£o h√° token nos segredos, a conex√£o inicial falhar√°, mas o servidor pode iniciar.
            # O front-end ainda permitir√° que o usu√°rio insira o token.
            pass # Permite que a execu√ß√£o continue mesmo sem o token inicial
    except ImportError:
        print("Ambiente fora do Google Colab ou biblioteca userdata n√£o dispon√≠vel.")
        print("Por favor, certifique-se de ter o token ngrok configurado via pyngrok.set_auth_token() ou como vari√°vel de ambiente.")
        pass # Fora do Colab, o usu√°rio deve configurar manualmente.


    port = 8000
    public_url_initial = "N√£o dispon√≠vel sem um token ngrok v√°lido no in√≠cio do Colab."
    try:
        # Tenta conectar. Se o token foi setado, funcionar√°.
        # Se n√£o, vai lan√ßar a exce√ß√£o que ser√° capturada.
        tunnel = ngrok.connect(port)
        public_url_initial = tunnel.public_url
    except Exception as ngrok_e:
        print(f"\nüö´ FALHA AO ESTABELECER T√öNEL NGROK INICIAL: {ngrok_e}")
        print("Isso pode acontecer se seu token ngrok n√£o estiver configurado corretamente nos segredos do Colab.")
        print("O servidor FastAPI ainda ser√° iniciado. Voc√™ precisar√° configurar o ngrok na interface web.")


    print(f"\n‚ú® **APLICATIVO PRONTO! ACESSE O LINK ABAIXO:** ‚ú®")
    print(f"üëâ {public_url_initial}") # Esta ser√° a URL que o usu√°rio precisa clicar
    print(f"\n----------------------------------------------------------------------")
    print(f"Instru√ß√µes:")
    print(f"1. Clique no link acima para abrir o aplicativo no seu navegador.")
    print(f"2. Na p√°gina que abrir, siga o 'Passo 1' para configurar seu token do ngrok (ele ser√° revalidado).")
    print(f"3. Ap√≥s configurar o ngrok, o 'Passo 2' para upload de arquivos aparecer√°.")
    print(f"----------------------------------------------------------------------")

    # Inicia o Uvicorn. Esta linha bloquear√° a c√©lula.
    uvicorn.run("main:app", host="0.0.0.0", port=port)

except Exception as e:
    print(f"\n--- ERRO CR√çTICO AO INICIAR O APLICATIVO ---")
    print(f"Ocorreu um erro inesperado: {e}")
    print(f"Isso pode ser devido a um problema no seu c√≥digo ou ambiente.")
    print(traceback.format_exc()) # Imprime o stack trace completo
finally:
    print("\nServidor Uvicorn desligado. Encerrando t√∫neis ngrok (se houver)...")
    ngrok.kill()
    print("Pronto. Voc√™ pode fechar esta aba do Colab.")